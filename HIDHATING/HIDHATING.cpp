// HIDHATING.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include "../hidapi/hidapi.h"
#include <stdlib.h>


static unsigned short LOGITECH_VENDOR_ID = 0x046D;
static const char * hex = "f3ff00aa010300000000000000013d6f8a970000000000000200000000000001000002000003000004000005000017000000020514000000006300005400005600040000005700005500002400002500000b00002700002d00002eff00aa01000002000003000004000005000017000000020514000000011e00002200001e00012100012200001f00012400012500002000012700012d000021";
//static const char * hex = "f3ff0000010300000000000000013d0000000000000000000200000000000001000002000003000004000005000017000000020514000000006300005400005600040000005700005500002400002500000b00002700002d00002eff000001000002000003000004000005000017000000020514000000011e00002200001e00012100012200001f00012400012500002000012700012d000021";
static unsigned char valsRESTORE[]{0xf3, 0xff, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3d, 0x6f, 0x8a, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x05, 0x14, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x54, 0x00, 0x00, 0x56, 0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x55, 0x00, 0x00, 0x24, 0x00, 0x00, 0x25, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x27, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x2e, 0xff, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x05, 0x14, 0x00, 0x00, 0x00, 0x01, 0x1e, 0x00, 0x00, 0x22, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x21, 0x00, 0x01, 0x22, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x24, 0x00, 0x01, 0x25, 0x00, 0x00, 0x20, 0x00, 0x01, 0x27, 0x00, 0x01, 0x2d, 0x00, 0x00, 0x21};
static unsigned char valsNEW[]{ 0xf3, 0xff, 0x00, 0xff, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3d, 0x6f, 0x8a, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x05, 0x14, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x54, 0x00, 0x00, 0x56, 0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x55, 0x00, 0x00, 0x24, 0x00, 0x00, 0x25, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x27, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x2e, 0x6e, 0xff, 0xaa, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x05, 0x14, 0x00, 0x00, 0x00, 0x01, 0x1e, 0x00, 0x00, 0x22, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x21, 0x00, 0x01, 0x22, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x24, 0x00, 0x01, 0x25, 0x00, 0x00, 0x20, 0x00, 0x01, 0x27, 0x00, 0x01, 0x2d, 0x00, 0x00, 0x21 };
static unsigned short G600_PRODUCT_ID = 0xc24a;


static const char allowed[]{'p'};
static const unsigned char* varRefs[] {valsNEW};





bool findInfo(hid_device_info ** outt, hid_device_info * list, int * path) {
    hid_device_info* out = nullptr;
    if (path == nullptr) {
        hid_device_info temp;
        temp.next = list;
        out = &temp;
        while ((out=out->next) != nullptr) std::cout << out->usage_page<< " "<< out->usage << "\n";
        return false;
    }
    out = nullptr;
    if (list == nullptr) return false;
    out = list;
    while (out != nullptr && out->usage_page != path[0] && out->usage != path[1] ) out = out->next;
    *outt = out;
    return out != nullptr;

}


void stb(int buf_len, unsigned char * buf, const char * h) {
    for (int i = 0; i < buf_len; i++) {
        char tbuf[3];
        tbuf[0] = *h;
        tbuf[1] = h[1];
        tbuf[2] ='\0';
        auto val =(unsigned char) strtol(tbuf,NULL,16);
        buf[i] = val;
        h += 2;
    }
}


bool validate(char* arg, int* ret) {
    if (arg[0] != '-') return false;
    for (int i = 0; i < sizeof(allowed) / sizeof(char); i++) {
        if (allowed[(*ret = i)] == arg[1]) return true;
    }
    *ret = -1;
    return arg[1] == 'r' ? true : false;
}


int main(int argc, char * argv[])
{

    const char* supported = "purple: -p\nrestoration color is red";
    int argIndex;
    if (argc != 2 || !(validate(argv[1],&argIndex))) {
        std::cout << "Invalid Arguments, use -r for restore or for color use one of below commands\n" << supported;
        exit(1);
    }

    std::cout << "Hello World!\n";
    auto res = hid_init();
    hid_device_info* info = NULL;
    auto mysize = sizeof(valsRESTORE) / sizeof(valsRESTORE[0]);
    int nums[]{65408,128};
    auto infoList = hid_enumerate(LOGITECH_VENDOR_ID, G600_PRODUCT_ID);
     if  (!(( findInfo(&info,infoList,nums)))) exit(-1);
     std::cout << info->usage_page << " " << info->usage << "\n";
     hid_device * dev = hid_open_path(info->path);
     
   //  auto buf_len = strlen(hex)/2;
     //unsigned char * usb_buff = (unsigned char *)malloc(sizeof(char) * buf_len + sizeof(char));
     //unsigned char* usb_buf = usb_buff + sizeof(char);
     //memset(usb_buf, 0x00, sizeof(usb_buf));
     //stb(buf_len, usb_buf, hex);
     //for (int i = 0; i < buf_len; i++) printf("%02x",usb_buf[i]);
     std::cout << "\n";
     //usb_buff[0] = 0xf3;
     res = hid_send_feature_report(dev,argIndex == -1 ?valsRESTORE : varRefs[argIndex],mysize);
     auto err = hid_error(dev);
     wprintf(L"%s\n", err);
     hid_close(dev);
     res = hid_exit();
}



